// Generated by CoffeeScript 1.6.3
var Index, clone, fs, path;

(require('source-map-support')).install({
  handleUncaughtExceptions: false
});

path = require('path');

fs = require('fs');

clone = require('regexp-clone');

module.exports = new (Index = (function() {
  var has_includes, match_all;

  function Index() {}

  Index.prototype.type = 'template';

  Index.prototype.name = 'html';

  Index.prototype.output = 'js';

  Index.prototype.ext = /\.html?$/m;

  Index.prototype.exts = ['.html', '.html'];

  has_includes = /\<!--#include\s*file\s*=/gm;

  match_all = /\<!--#include\s*file\s*=\s*(?:"|')([^"']+)(?:"|')\s*-->/gm;

  Index.prototype.partials = true;

  Index.prototype.is_partial = function(filepath) {
    return /^_/m.test(path.basename(filepath));
  };

  Index.prototype.compile = function(filepath, source, debug, error, done) {
    var compiled, escaped, rendered;
    rendered = this.render_partials(filepath, source, error);
    escaped = rendered.replace(/\n/g, '\\\n').replace(/'/g, '\\\'');
    compiled = "module.exports = function() { return '" + escaped + "'; };";
    return done(compiled, null);
  };

  Index.prototype.resolve_dependents = function(filepath, files) {
    var all, dependents, dirpath, each, full_id_a, full_id_b, has, match, name, short_id, sub, _i, _len, _ref;
    dependents = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      each = files[_i];
      _ref = [clone(has_includes), clone(match_all)], has = _ref[0], all = _ref[1];
      if (!has.test(each.raw)) {
        continue;
      }
      dirpath = path.dirname(each.filepath);
      name = path.basename(each.filepath);
      while ((match = all.exec(each.raw)) != null) {
        short_id = match[1];
        full_id_a = short_id.replace(this.ext, '') + '.htm';
        full_id_b = short_id.replace(this.ext, '') + '.html';
        full_id_a = path.join(dirpath, full_id_a);
        full_id_b = path.join(dirpath, full_id_b);
        if (full_id_a === filepath || full_id_b === filepath) {
          if (!this.is_partial(name)) {
            dependents.push(each);
          } else {
            sub = this.resolve_dependents(each.filepath, files);
            dependents = dependents.concat(sub);
          }
        }
      }
    }
    return dependents;
  };

  Index.prototype.render_partials = function(filepath, source, error) {
    var all, buffer, full, has, include, include_a, include_b, include_path, match, partial_content, _ref;
    _ref = [clone(has_includes), clone(match_all)], has = _ref[0], all = _ref[1];
    if (!has.test(source)) {
      return source;
    }
    buffer = source;
    while ((match = all.exec(source)) != null) {
      full = match[0];
      include = match[1];
      include_path = path.join(path.dirname(filepath), match[1]);
      include_a = include_path.replace(this.ext, '') + '.html';
      include_b = include_path.replace(this.ext, '') + '.htm';
      partial_content = null;
      if (fs.existsSync(include_a)) {
        partial_content = fs.readFileSync(include_a).toString();
        partial_content = this.render_partials(include_a, partial_content, error);
      } else if (fs.existsSync(include_b)) {
        partial_content = fs.readFileSync(include_b).toString();
        partial_content = this.render_partials(include_b, partial_content, error);
      } else {
        partial_content = '';
        error("file '" + include + "' do not exist for '" + filepath + "'");
      }
      buffer = buffer.replace(full, partial_content);
    }
    return buffer;
  };

  return Index;

})());

/*
//@ sourceMappingURL=index.map
*/
