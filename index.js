// Generated by CoffeeScript 1.6.3
var Index, fs, path;

(require('source-map-support')).install({
  handleUncaughtExceptions: false
});

path = require('path');

fs = require('fs');

module.exports = new (Index = (function() {
  function Index() {}

  Index.prototype.type = 'template';

  Index.prototype.name = 'html';

  Index.prototype.output = 'js';

  Index.prototype.ext = /\.html?$/m;

  Index.prototype.exts = ['.html', '.html'];

  Index.prototype.partials = true;

  Index.prototype.is_partial = function(filepath) {
    return /^_/m.test(path.basename(filepath));
  };

  Index.prototype.compile = function(filepath, source, debug, error, done) {
    var compiled, escaped, rendered;
    rendered = this.render_partials(filepath, source);
    escaped = rendered.replace(/\n/g, '\\\n').replace(/'/g, '\\\'');
    compiled = "module.exports = function() { return '" + escaped + "'; };";
    return done(compiled, null);
  };

  Index.prototype.resolve_dependents = function(file, files) {
    var dependents, dirpath, each, full_id_a, full_id_b, has_includes, match, match_all, name, short_id, _i, _len;
    dependents = [];
    has_includes = /\<!--#include\s*file\s*=/gm;
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      each = files[_i];
      if (!has_includes.test(each.raw)) {
        continue;
      }
      dirpath = path.dirname(each.filepath);
      name = path.basename(each.filepath);
      match_all = /\<!--#include\s*file\s*=\s*(?:"|')([^"']+)(?:"|')\s*-->/gm;
      while ((match = match_all.exec(each.raw)) != null) {
        short_id = match[1];
        full_id_a = full_id_b = short_id;
        if ('' === path.extname(short_id)) {
          full_id_a += '.htm';
        }
        if ('' === path.extname(short_id)) {
          full_id_b += '.html';
        }
        full_id_a = path.join(dirpath, full_id_a);
        full_id_b = path.join(dirpath, full_id_b);
        if (full_id_a === file.filepath || full_id_b === file.filepath) {
          if (!this.is_partial(name)) {
            dependents.push(each);
          } else {
            dependents = dependents.concat(this.resolve_dependents(each, files));
          }
        }
      }
    }
    return dependents;
  };

  Index.prototype.render_partials = function(filepath, source) {
    var contents, has_includes, include_contents, include_path, match, match_all;
    has_includes = /\<!--#include\s*file\s*=/gm;
    match_all = /\<!--#include\s*file\s*=\s*(?:"|')([^"']+)(?:"|')\s*-->/gm;
    if (!has_includes.test(source)) {
      return source;
    }
    contents = source;
    while ((match = match_all.exec(contents))) {
      include_path = path.join(path.dirname(filepath), match[1]);
      include_path += '.html';
      if (fs.existsSync(include_path)) {
        include_contents = (fs.readFileSync(include_path)).toString();
      } else {
        include_contents = '';
        error("File " + include_path + " do not exist");
      }
      contents = contents.replace(match[0], include_contents);
    }
    return contents;
  };

  return Index;

})());
